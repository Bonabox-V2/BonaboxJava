package br.com.bonabox.business.usecases.impl;


import br.com.bonabox.business.api.filter.DataMDC;
import br.com.bonabox.business.config.ConfigurationType;
import br.com.bonabox.business.dataproviders.*;
import br.com.bonabox.business.dataproviders.data.BoxDataResponse;
import br.com.bonabox.business.domain.CompartimentoStatusTempRequest;
import br.com.bonabox.business.domain.CompartimentoStatusTempResponse;
import br.com.bonabox.business.domain.webclient.*;
import br.com.bonabox.business.usecases.NotificacaoUseCase;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.Normalizer;
import java.util.*;

@Component
public class NotificacaoUseCaseImpl implements NotificacaoUseCase {

	private final ValidateDataProvider validateDataProvider;
	private final PessoaDataProvider pessoaDataProvider;
	private final GenerateQRCodeDataProvider generateQRCodeDataProvider;
	private final CondominioDataProvider condominioDataProvider;
	private final CompartimentoDataProvider compartimentoDataProvider;
	private final EntregaDataProvider entregaDataProvider;
	private final EntregadorDataProvider entregadorDataProvider;
	private final EmpresaEntregaDataProvider empresaEntregaDataProvider;
	private final BoxDataProvider boxDataProvider;
	private final UnidadeDataProvider unidadeDataProvider;
	private final BlocoDataProvider blocoDataProvider;
	private final EnviarNotificacaoDataProvider enviarNotificacaoDataProvider;
	
	@Autowired
	@Qualifier("email")
	private EnviarNotificacaoDataProvider emailServiceImpl;
	
	@Autowired
	@Qualifier("config")
	private ConfigurationType configurationType;

	@Value("${entrega.mensagem.inquilino.retirada}")
	private String mensagemInquilinoRetirada;

	@Value("${entrega.mensagem.entregador.entrega}")
	private String mensagemEntregadorEntrega;

	@Value("${entrega.mensagem.admin}")
	private String[] telefonesAdmin;
	
	@Value("${entrega.mensagem.email.admin}")
	private String[] emailsAdmin;

	@Value("${mensagem.server.notificacao}")
	private String serverNotificacao;
	
	private DataMDC dataMdc;
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private LoggerGateway loggerGateway;
	
	public NotificacaoUseCaseImpl(ValidateDataProvider validateDataProvider,
			PessoaDataProvider pessoaDataProvider, GenerateQRCodeDataProvider generateQRCodeDataProvider,
			CondominioDataProvider condominioDataProvider, CompartimentoDataProvider compartimentoDataProvider,
			EntregaDataProvider entregaDataProvider, EntregadorDataProvider entregadorDataProvider,
			EmpresaEntregaDataProvider empresaEntregaDataProvider, BoxDataProvider boxDataProvider,
			UnidadeDataProvider unidadeDataProvider, BlocoDataProvider blocoDataProvider,
			@Qualifier("sms")EnviarNotificacaoDataProvider enviarNotificacaoDataProvider) {
		this.validateDataProvider = validateDataProvider;
		this.pessoaDataProvider = pessoaDataProvider;
		this.generateQRCodeDataProvider = generateQRCodeDataProvider;
		this.condominioDataProvider = condominioDataProvider;
		this.compartimentoDataProvider = compartimentoDataProvider;
		this.entregaDataProvider = entregaDataProvider;
		this.entregadorDataProvider = entregadorDataProvider;
		this.empresaEntregaDataProvider = empresaEntregaDataProvider;
		this.boxDataProvider = boxDataProvider;
		this.unidadeDataProvider = unidadeDataProvider;
		this.blocoDataProvider = blocoDataProvider;
		this.enviarNotificacaoDataProvider = enviarNotificacaoDataProvider;

	}

	@Async
	@Override
	public void notificar(CompartimentoStatusTempResponse compartimentoStatusTempResponse,
						  StatusEntregaDataWebClient statusEntregaDataWebClient, String codigoEntrega,
						  StatusEntregaDataWebClient dataWebClient, String dataHoraDeposito) {

		try {

			final int SITUACAO_DEPOSITADO = 2;

			// ###### Temporário
			String numeroSerial = "OY6URTF5E3SQ20G";
			// ###### Precisa implementar o método abaixo
			// numeroSerial = boxDataProvider.getBox(compartimentoStatusTempResponse.getBoxId()).getNumeroSerial();

			GenerateDataWebClientRequest generate = new GenerateDataWebClientRequest();
			generate.setEntregaId(compartimentoStatusTempResponse.getEntregaId());
			generate.setNumeroSerial(numeroSerial);// ###### Modificar
			// generate.setPorta(codigoAleatorio);//Código gerado aleatoriamente
			generate.setPorta(compartimentoStatusTempResponse.getLabelPorta());

			// Cria token para retirada de entrega (encomenda)
			GenerateDataWebClientResponse clientResponse = validateDataProvider.build(dataMdc).generate(generate); // Implementar Roolback

			String qrCodeRandomCode = clientResponse.getCodigoRandomico();

			// 7 - Gera imagem QRCode
			BufferedImage qrCodeImage = generateQRCodeDataProvider.build(dataMdc).generate(qrCodeRandomCode);

			// Será recuperado no método de retirada por QRCode
			List<CompartimentoStatusTempRequest> tempRequestsList = new ArrayList<CompartimentoStatusTempRequest>();
			tempRequestsList.add(new CompartimentoStatusTempRequest(qrCodeRandomCode,
					compartimentoStatusTempResponse.getCompartimentoId(), compartimentoStatusTempResponse.getBoxId(),
					SITUACAO_DEPOSITADO, compartimentoStatusTempResponse.getEntregaId(),
					compartimentoStatusTempResponse.getCompartimentoCom1Id(),
					compartimentoStatusTempResponse.getLabelPorta()));

			compartimentoDataProvider.build(dataMdc).criarComIdAleatorioLista(tempRequestsList); // Roolback

			// 8 - Recupera dados dos envolvidos
			// 9 - Enviar notificação para os envolvidos (inquilino e entregador)

			EntregaDataWebClientResponse entrega = entregaDataProvider.build(dataMdc).consultar(codigoEntrega);

			List<PessoaDataWebClient> pessoaDataWebClient = pessoaDataProvider.build(dataMdc)
					.consultarPessoaMoradorPrincipalPorUnidadeList(entrega.getCodigoCondominio(),
							statusEntregaDataWebClient.getCodigoAla(), statusEntregaDataWebClient.getCodigoBloco(),
							statusEntregaDataWebClient.getCodigoUnidade());

			// Consulta dados do condomínio
			CondominioDataWebClientRequest condominioDataWebClientRequest = condominioDataProvider.build(dataMdc)
					.consultarCondominio(entrega.getCodigoCondominio());
			EntregadorDataWebClientResponse entregador = entregadorDataProvider.build(dataMdc)
					.consultar(dataWebClient.getCodigoEntregador());

			List<EmpresaEntregaDataWebClient> lista = empresaEntregaDataProvider.build(dataMdc).consultarTodos();

			EmpresaEntregaDataWebClient empresa = lista.stream()
					.filter(f -> f.getEmpresaId() == entrega.getCodigoEmpresaEntregdora()).findFirst().get();
			
			BoxDataResponse box = boxDataProvider.build(dataMdc).getByNumeroSerialAndTipo(numeroSerial, "PRINCIPAL");

			String empresaEntregadora = empresa.getNome();
			//String NomeEntregador = entregador.getNome();
			String localCondominioNome = condominioDataWebClientRequest.getNome();
			String nomeBox = box.getNome();

			String urlShort = String.format(serverNotificacao, qrCodeRandomCode);
			urlShort = this.generateShorterUrl(urlShort, RandomStringUtils.randomAlphanumeric(8)).getUrl()
					.getShortLink();

			String urlShortEntregador = String.format(serverNotificacao, qrCodeRandomCode);
			urlShortEntregador = this.generateShorterUrl(urlShortEntregador, RandomStringUtils.randomAlphanumeric(8))
					.getUrl().getShortLink();

			String codigoRetiradaEntrega = clientResponse.getCodigo();

			Map<String, String> mapEnvioSMSMorador = criarEnvioMorador(statusEntregaDataWebClient, pessoaDataWebClient,
					localCondominioNome, codigoRetiradaEntrega, urlShortEntregador);

			logger.info("Enviando SMS para moradores {}",mapEnvioSMSMorador);
			enviarNotificacaoDataProvider.enviarLista(mapEnvioSMSMorador);

			//loggerGateway.sendLogger();
			
			UnidadeDataWebClient unidade = unidadeDataProvider.build(dataMdc).consultarUnidade(dataWebClient.getCodigoUnidade());
			BlocoDataWebClient bloco = blocoDataProvider.build(dataMdc).consultarBloco(dataWebClient.getCodigoBloco());

			// Mensagem entregador
			String mensagemEntregador = String.format(
					"Olá ENTREGADOR   Comprovante de entrega em %s   " + "Data: %s   " + "Código da entrega: %s   ",
					localCondominioNome, dataHoraDeposito, entrega.getEntregaId());
			enviarNotificacaoDataProvider.enviar(mensagemEntregador,
					(entregador.getDdi() + entregador.getDdd() + entregador.getTelefone()));

			for (String telefone : telefonesAdmin) {
				String mensagemAdmin = String.format(
						"Registro de entrega  " + "%s, box %s  " + "Ala %s, bl %s, uni %s  " + "%s  "
								+ "Morador e Entregador avisados",
						localCondominioNome, nomeBox, "Única", bloco.getLabel(), unidade.getLabelUnidade(),
						entrega.getEntregaId());
				enviarNotificacaoDataProvider.enviar(mensagemAdmin, telefone);
			}

			Map<String, String> mapEnvioEmailMorador = criarEnvioEmailMorador(qrCodeImage, dataHoraDeposito, empresaEntregadora, nomeBox,
					statusEntregaDataWebClient, pessoaDataWebClient, localCondominioNome, codigoRetiradaEntrega,
					urlShortEntregador);
			
			//logger.info("Enviando EMAIL para moradores {}",mapEnvioEmailMorador);
			emailServiceImpl.enviarLista(mapEnvioEmailMorador);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private Map<String, String> criarEnvioEmailMorador(BufferedImage qrCodeImage, String dataHoraDeposito,
			String empresaEntregadora, String nomeBox, StatusEntregaDataWebClient statusEntregaDataWebClient,
			List<PessoaDataWebClient> pessoaDataWebClient, String localCondominioNome, String codigoRetiradaEntrega,
			String urlShort) {

		Map<String, String> mapEnvioEmailMorador = new HashMap<String, String>();
		
		try {

			List<PessoaDataWebClient> pessoaListEnviarMensagem = new ArrayList<PessoaDataWebClient>();
			
			for(PessoaDataWebClient pessoa : pessoaDataWebClient) {
				String [] array = pessoa.getNome().trim().split(" ");
				String nome = array.length == 0 ? "" : array[0];
				
				nome = Normalizer.normalize(nome, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]", "");
				
				if (!nome.trim().isBlank()
						&& nome.trim().equalsIgnoreCase(statusEntregaDataWebClient.getNomeMorador())) {
					pessoaListEnviarMensagem.add(pessoa);
				}
			}
			
			if(pessoaListEnviarMensagem.isEmpty()) {
				pessoaListEnviarMensagem = pessoaDataWebClient;
			}
			
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(qrCodeImage, "png", baos);
			byte[] bytes = baos.toByteArray();
			String base64 = Base64.getEncoder().encodeToString(bytes);
			
			for(PessoaDataWebClient pessoa : pessoaListEnviarMensagem) {
				if(!pessoa.getEmail().trim().isEmpty()) {
					String content = "Bonabox - Nova encomenda#Olá " + pessoa.getNome() + "!#" + empresaEntregadora + "#"
							+ dataHoraDeposito + "#" + localCondominioNome + "#" + nomeBox + "#"
							+ codigoRetiradaEntrega + "#" + base64 + "#Olá morador, recebemos uma encomenda pra você!";
					logger.info("Preparando envio de e-mail morador: {} {}", pessoa.getNome(), pessoa.getEmail());
					mapEnvioEmailMorador.put(pessoa.getEmail(), content);
				} else {
					logger.info("Pessoa {} não tem e-mail cadastrado", pessoa.getNome());
				}
			}

			// Envio de e-mail para administrador
			base64 = "";

			String email = String.join(",", emailsAdmin);
			
			String content = "Bonabox - Aviso de ENTREGA de encomenda#Olá Administrador!#" + empresaEntregadora + "#"
					+ dataHoraDeposito + "#" + localCondominioNome + "#" + nomeBox + "#"
					+ this.substituir(codigoRetiradaEntrega) + "#" + base64
					+ "#Acabamos de realizar mais uma entrega: " + statusEntregaDataWebClient.getEntregaId()
					+ "<br><br>Por segurança, os dados de retirada da encomenda não são disponibilidados.";
			
			logger.info("Preparando envio de e-mail para administradores: {}", email);
			mapEnvioEmailMorador.put(email, content);
		
		} catch (Exception e) {
			logger.error("Metodo criarEnvioEmailMorador - {}", e.getMessage(), e);
		}
		
		return mapEnvioEmailMorador;
	}
	
	private String substituir(String valor) {
		if(valor.split("-").length > 0) {
			return "****-"+valor.split("-")[1];
		} else {
			return valor;
		}
	}
	
	private Map<String, String> criarEnvioMorador(StatusEntregaDataWebClient statusEntregaDataWebClient,
			List<PessoaDataWebClient> pessoaDataWebClient, String localCondominioNome, String codigoRetiradaEntrega,
			String urlShort) {
		
		Map<String, String> map = new HashMap<String, String>();
		
		try {
			// Mensagem morador
			List<PessoaDataWebClient> pessoaListEnviarMensagem = new ArrayList<PessoaDataWebClient>();

			for (PessoaDataWebClient pessoa : pessoaDataWebClient) {
				String[] array = pessoa.getNome().trim().split(" ");
				String nome = array.length == 0 ? "" : array[0];

				nome = Normalizer.normalize(nome, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]", "");

				if (!nome.trim().isBlank()
						&& nome.trim().equalsIgnoreCase(statusEntregaDataWebClient.getNomeMorador())) {
					pessoaListEnviarMensagem.add(pessoa);
				}
			}

			if (pessoaListEnviarMensagem.isEmpty()) {
				pessoaListEnviarMensagem = pessoaDataWebClient;
			}

			String mensagemMorador;
			if (statusEntregaDataWebClient.getNomeMorador() == null
					|| statusEntregaDataWebClient.getNomeMorador().trim().isEmpty()) {
				mensagemInquilinoRetirada = "Há uma nova encomenda aguardando para ser retirada em %s.  "
						+ "Código de retirada: %s  " + "Detalhes: %s";

				mensagemMorador = String.format(mensagemInquilinoRetirada, localCondominioNome, codigoRetiradaEntrega,
						urlShort);
			} else {
				mensagemInquilinoRetirada = "Há uma nova encomenda aguardando para ser retirada em %s.  " + "Para: %s  "
						+ "Código de retirada: %s  " + "Detalhes: %s";

				mensagemMorador = String.format(mensagemInquilinoRetirada, localCondominioNome,
						statusEntregaDataWebClient.getNomeMorador().toUpperCase(), codigoRetiradaEntrega, urlShort);
			}

			for (PessoaDataWebClient pessoa : pessoaListEnviarMensagem) {
				map.put(pessoa.getNumeroCelular(), mensagemMorador);
			}

			return map;
		}catch (Exception e) {
			logger.error("Metodo criarEnvioMorador (SMS) - {}", e.getMessage(), e);
		}
		
		return map;
	}

	private OutPutShorter generateShorterUrl(String myUrl, String customNameAlias) {

		String output = "";

		try {

			URL url = new URL(configurationType.getNotification().get("ShortUrl").concat("?key=")
					.concat(configurationType.getNotification().get("ShortUrlKey")).concat("&short=").concat(myUrl)
					.concat("&name=").concat(customNameAlias));

			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");

			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

			String result = "";
			while ((result = br.readLine()) != null) {
				output += result;
			}

			conn.disconnect();
			return new ObjectMapper().readValue(output, OutPutShorter.class);
		} catch (MalformedURLException e) {
			logger.error(e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			logger.error(e.getMessage());
			e.printStackTrace();
		}

		return new OutPutShorter(new MyUrl());
	}
	
	@Override
	public NotificacaoUseCase build(DataMDC dataMdc) {
		this.dataMdc = dataMdc;
		return this;
	}

}
